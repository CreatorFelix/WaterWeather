package com.creator.waterweather.data.source.local.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.creator.waterweather.data.City;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CITY".
*/
public class CityDao extends AbstractDao<City, Long> {

    public static final String TABLENAME = "CITY";

    /**
     * Properties of entity City.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property CityId = new Property(0, long.class, "cityId", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property ParentCity = new Property(2, String.class, "parentCity", false, "PARENT_CITY");
        public final static Property AdminArea = new Property(3, String.class, "adminArea", false, "ADMIN_AREA");
        public final static Property Country = new Property(4, String.class, "country", false, "COUNTRY");
        public final static Property Selected = new Property(5, boolean.class, "selected", false, "SELECTED");
        public final static Property Priority = new Property(6, int.class, "priority", false, "PRIORITY");
    }


    public CityDao(DaoConfig config) {
        super(config);
    }
    
    public CityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: cityId
                "\"NAME\" TEXT," + // 1: name
                "\"PARENT_CITY\" TEXT," + // 2: parentCity
                "\"ADMIN_AREA\" TEXT," + // 3: adminArea
                "\"COUNTRY\" TEXT," + // 4: country
                "\"SELECTED\" INTEGER NOT NULL ," + // 5: selected
                "\"PRIORITY\" INTEGER NOT NULL );"); // 6: priority
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, City entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getCityId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String parentCity = entity.getParentCity();
        if (parentCity != null) {
            stmt.bindString(3, parentCity);
        }
 
        String adminArea = entity.getAdminArea();
        if (adminArea != null) {
            stmt.bindString(4, adminArea);
        }
 
        String country = entity.getCountry();
        if (country != null) {
            stmt.bindString(5, country);
        }
        stmt.bindLong(6, entity.getSelected() ? 1L: 0L);
        stmt.bindLong(7, entity.getPriority());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, City entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getCityId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String parentCity = entity.getParentCity();
        if (parentCity != null) {
            stmt.bindString(3, parentCity);
        }
 
        String adminArea = entity.getAdminArea();
        if (adminArea != null) {
            stmt.bindString(4, adminArea);
        }
 
        String country = entity.getCountry();
        if (country != null) {
            stmt.bindString(5, country);
        }
        stmt.bindLong(6, entity.getSelected() ? 1L: 0L);
        stmt.bindLong(7, entity.getPriority());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public City readEntity(Cursor cursor, int offset) {
        City entity = new City( //
            cursor.getLong(offset + 0), // cityId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // parentCity
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // adminArea
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // country
            cursor.getShort(offset + 5) != 0, // selected
            cursor.getInt(offset + 6) // priority
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, City entity, int offset) {
        entity.setCityId(cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setParentCity(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAdminArea(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCountry(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSelected(cursor.getShort(offset + 5) != 0);
        entity.setPriority(cursor.getInt(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(City entity, long rowId) {
        entity.setCityId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(City entity) {
        if(entity != null) {
            return entity.getCityId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(City entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
